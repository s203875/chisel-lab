;buildInfoPackage: chisel3, version: 3.4.1, scalaVersion: 2.12.12, sbtVersion: 1.3.10
circuit CountSevenSeg : 
  module SevenSegDec : 
    input clock : Clock
    input reset : Reset
    output io : {flip in : UInt<4>, out : UInt<7>}
    
    wire sevSeg : UInt
    sevSeg <= UInt<1>("h00")
    node _T = eq(UInt<1>("h00"), io.in) @[Conditional.scala 37:30]
    when _T : @[Conditional.scala 40:58]
      sevSeg <= UInt<6>("h03f") @[SevenSegDec.scala 17:28]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_1 = eq(UInt<1>("h01"), io.in) @[Conditional.scala 37:30]
      when _T_1 : @[Conditional.scala 39:67]
        sevSeg <= UInt<3>("h06") @[SevenSegDec.scala 18:28]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_2 = eq(UInt<2>("h02"), io.in) @[Conditional.scala 37:30]
        when _T_2 : @[Conditional.scala 39:67]
          sevSeg <= UInt<7>("h05b") @[SevenSegDec.scala 19:28]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_3 = eq(UInt<2>("h03"), io.in) @[Conditional.scala 37:30]
          when _T_3 : @[Conditional.scala 39:67]
            sevSeg <= UInt<7>("h04f") @[SevenSegDec.scala 20:28]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_4 = eq(UInt<3>("h04"), io.in) @[Conditional.scala 37:30]
            when _T_4 : @[Conditional.scala 39:67]
              sevSeg <= UInt<7>("h066") @[SevenSegDec.scala 21:28]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_5 = eq(UInt<3>("h05"), io.in) @[Conditional.scala 37:30]
              when _T_5 : @[Conditional.scala 39:67]
                sevSeg <= UInt<7>("h06d") @[SevenSegDec.scala 22:28]
                skip @[Conditional.scala 39:67]
              else : @[Conditional.scala 39:67]
                node _T_6 = eq(UInt<3>("h06"), io.in) @[Conditional.scala 37:30]
                when _T_6 : @[Conditional.scala 39:67]
                  sevSeg <= UInt<7>("h07d") @[SevenSegDec.scala 23:28]
                  skip @[Conditional.scala 39:67]
                else : @[Conditional.scala 39:67]
                  node _T_7 = eq(UInt<3>("h07"), io.in) @[Conditional.scala 37:30]
                  when _T_7 : @[Conditional.scala 39:67]
                    sevSeg <= UInt<3>("h07") @[SevenSegDec.scala 24:28]
                    skip @[Conditional.scala 39:67]
                  else : @[Conditional.scala 39:67]
                    node _T_8 = eq(UInt<4>("h08"), io.in) @[Conditional.scala 37:30]
                    when _T_8 : @[Conditional.scala 39:67]
                      sevSeg <= UInt<7>("h07f") @[SevenSegDec.scala 25:28]
                      skip @[Conditional.scala 39:67]
                    else : @[Conditional.scala 39:67]
                      node _T_9 = eq(UInt<4>("h09"), io.in) @[Conditional.scala 37:30]
                      when _T_9 : @[Conditional.scala 39:67]
                        sevSeg <= UInt<7>("h06f") @[SevenSegDec.scala 26:28]
                        skip @[Conditional.scala 39:67]
                      else : @[Conditional.scala 39:67]
                        node _T_10 = eq(UInt<4>("h0a"), io.in) @[Conditional.scala 37:30]
                        when _T_10 : @[Conditional.scala 39:67]
                          sevSeg <= UInt<7>("h077") @[SevenSegDec.scala 27:28]
                          skip @[Conditional.scala 39:67]
                        else : @[Conditional.scala 39:67]
                          node _T_11 = eq(UInt<4>("h0b"), io.in) @[Conditional.scala 37:30]
                          when _T_11 : @[Conditional.scala 39:67]
                            sevSeg <= UInt<7>("h07c") @[SevenSegDec.scala 28:28]
                            skip @[Conditional.scala 39:67]
                          else : @[Conditional.scala 39:67]
                            node _T_12 = eq(UInt<4>("h0c"), io.in) @[Conditional.scala 37:30]
                            when _T_12 : @[Conditional.scala 39:67]
                              sevSeg <= UInt<6>("h039") @[SevenSegDec.scala 29:28]
                              skip @[Conditional.scala 39:67]
                            else : @[Conditional.scala 39:67]
                              node _T_13 = eq(UInt<4>("h0d"), io.in) @[Conditional.scala 37:30]
                              when _T_13 : @[Conditional.scala 39:67]
                                sevSeg <= UInt<7>("h05e") @[SevenSegDec.scala 30:28]
                                skip @[Conditional.scala 39:67]
                              else : @[Conditional.scala 39:67]
                                node _T_14 = eq(UInt<4>("h0e"), io.in) @[Conditional.scala 37:30]
                                when _T_14 : @[Conditional.scala 39:67]
                                  sevSeg <= UInt<7>("h079") @[SevenSegDec.scala 31:28]
                                  skip @[Conditional.scala 39:67]
                                else : @[Conditional.scala 39:67]
                                  node _T_15 = eq(UInt<4>("h0f"), io.in) @[Conditional.scala 37:30]
                                  when _T_15 : @[Conditional.scala 39:67]
                                    sevSeg <= UInt<7>("h071") @[SevenSegDec.scala 32:28]
                                    skip @[Conditional.scala 39:67]
    io.out <= sevSeg @[SevenSegDec.scala 35:10]
    
  module CountSevenSeg : 
    input clock : Clock
    input reset : UInt<1>
    output io : {seg : UInt<7>, an : UInt<4>}
    
    reg tickCounterReg : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[CountSevenSeg.scala 12:31]
    node tick = eq(tickCounterReg, UInt<26>("h02faf07f")) @[CountSevenSeg.scala 13:29]
    node _T = add(tickCounterReg, UInt<1>("h01")) @[CountSevenSeg.scala 15:35]
    node _T_1 = tail(_T, 1) @[CountSevenSeg.scala 15:35]
    tickCounterReg <= _T_1 @[CountSevenSeg.scala 15:18]
    when tick : @[CountSevenSeg.scala 16:15]
      tickCounterReg <= UInt<1>("h00") @[CountSevenSeg.scala 17:20]
      skip @[CountSevenSeg.scala 16:15]
    reg lowFrequCntReg : UInt<4>, clock with : (reset => (reset, UInt<4>("h00"))) @[CountSevenSeg.scala 20:31]
    when tick : @[CountSevenSeg.scala 21:15]
      node _T_2 = add(lowFrequCntReg, UInt<1>("h01")) @[CountSevenSeg.scala 22:37]
      node _T_3 = tail(_T_2, 1) @[CountSevenSeg.scala 22:37]
      lowFrequCntReg <= _T_3 @[CountSevenSeg.scala 22:20]
      skip @[CountSevenSeg.scala 21:15]
    inst dec of SevenSegDec @[CountSevenSeg.scala 25:20]
    dec.clock <= clock
    dec.reset <= reset
    dec.io.in <= lowFrequCntReg @[CountSevenSeg.scala 26:12]
    io.seg <= dec.io.out @[CountSevenSeg.scala 29:10]
    io.an <= UInt<4>("h0e") @[CountSevenSeg.scala 30:9]
    
